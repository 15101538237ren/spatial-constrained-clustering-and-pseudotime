install.packages( "treemap" );
str(ip <- installed.packages(.Library, priority = "high"))
ip[, c(1,3:5)]
plic <- installed.packages(.Library, priority = "high", fields = "License")
## what licenses are there:
table( plic[, "License"] )
View(plic)
clear
ip <- installed.packages(.Library, priority = "high")
View(ip)
rm(list=ls())
install.packages( "treemap" );
install.packages( "ggplot2" );
install.packages( "scales" );
# --------------------------------------------------------------------------
# If you don't have the scales package installed, uncomment the following line:
# install.packages( "scales" );
library( scales );
source('~/Downloads/REVIGO.r')
View(p1)
p1
source('~/Downloads/REVIGO_treemap.r')
View(stuff)
View(stuff)
install.packages( c("rvest","httr" ));
baseurl <- "http://revigo.irb.hr/"
goList = "GO:0009268 1e-14
GO:0010447 1e-14
GO:0000027 1e-297
GO:0042255 1e-297
GO:0042257 1e-297
GO:0042273 1e-297"
revigo_session <- html_session("http://revigo.irb.hr/")
revigo_form <- html_form(revigo_session)[[1]]
filled_form <- set_values(revigo_form,'goList' = goList, 'cutoff'=0.4, 'isPValue'="yes")
result_page <- submit_form(revigo_session, filled_form, submit='startRevigo')
results_table <- html_table(result_page)[[1]]
names(results_table) <- results_table[2,]
results_table <- results_table[3:nrow(results_table),]
# how to get the representative category?
temp <- html_nodes(result_page, "#fragment-1c")
xml_text(temp)
strsplit(xml_text(temp), "\\[|\\]")[[1]]
library(rvest)
library(httr)
rm()
baseurl <- "http://revigo.irb.hr/"
goList = "GO:0009268 1e-14
GO:0010447 1e-14
GO:0000027 1e-297
GO:0042255 1e-297
GO:0042257 1e-297
GO:0042273 1e-297"
revigo_session <- html_session("http://revigo.irb.hr/")
revigo_form <- html_form(revigo_session)[[1]]
filled_form <- set_values(revigo_form,'goList' = goList, 'cutoff'=0.4, 'isPValue'="yes")
result_page <- submit_form(revigo_session, filled_form, submit='startRevigo')
results_table <- html_table(result_page)[[1]]
names(results_table) <- results_table[2,]
results_table <- results_table[3:nrow(results_table),]
# how to get the representative category?
temp <- html_nodes(result_page, "#fragment-1c")
xml_text(temp)
strsplit(xml_text(temp), "\\[|\\]")[[1]]
View(temp)
source('~/Downloads/REVIGO_treemap.r')
rm(list = ls(all.names = TRUE))
library(rtracklayer)
library(org.Hs.eg.db)
library(clusterProfiler)
library(GenomicRanges)
library(DOSE)
library(annotatr)
library(ChIPseeker)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
base_dir = "../DATA/PLOT_PREPARATION/Fig_2c_ChromoHMM_distribution/ANNOTATION_REGION/PERCENTILED_K_3_category"
bed_data_fps <- c("LM_K_0_33.bed", "LM_K_33_66.bed", "LM_K_66_100.bed", "IM_K_0_33.bed", "IM_K_33_66.bed", "IM_K_66_100.bed", "HM_K_0_33.bed", "HM_K_33_66.bed", "HM_K_66_100.bed") #../DATA/PLOT_PREPARATION/Fig_2c_ChromoHMM_distribution/ANNOTATION_REGION/PERCENTILED_K_3_category/GM_K_0_33/GM_K_0_33_in_hESC_jsd_nearest_genes.bed
grs <- c()
for (i in 1: length(bed_data_fps))
{
bed_fp <- paste(base_dir, bed_data_fps[i], sep="/")
df <- as.data.frame(read.table(bed_fp, header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
colnames(df)<-c("chr","start", "end", "methy", "k", "chromHMM")# , "ENSG", "dist"
strand <- rep('.', dim(df)[1])
k_df <- cbind(df, strand)
k_df<-k_df[, c("chr","start", "end", "strand", "k")]
colnames(k_df)<-c("chr","start", "end", "strand", "score")
grs <- c(grs, makeGRangesFromDataFrame(k_df))
}
bed_names <- c("LM_K_0_33", "LM_K_33_66", "LM_K_66_100", "IM_K_0_33", "IM_K_33_66", "IM_K_66_100", "HM_K_0_33", "HM_K_33_66", "HM_K_66_100")
setNames(grs, bed_names)
tss_region<-2000
peakAnnoList <- sapply(grs, annotatePeak, TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene, tssRegion=c(-tss_region, tss_region), simplify = FALSE, USE.NAMES = TRUE)#verbose=FALSE,
setNames(peakAnnoList, bed_names)
lineage_fp = "../DATA/gene_pair_lineage.csv"
lineage_df <- as.data.frame(read.csv(lineage_fp, header = T))
lineage_fp = "~/PycharmProjects/Cell_Fate_Trajactory_Clustering/DATA/gene_pair_lineage.csv"
lineage_df <- as.data.frame(read.csv(lineage_fp, header = T))
View(lineage_df)
debugSource('~/PycharmProjects/Cell_Fate_Trajactory_Clustering/R/Lineage_distribution_of_each_cluster.R')
View(gene_pair_df)
View(lineage_df)
View(lineage_df)
View(lineage_df)
debugSource('~/PycharmProjects/Cell_Fate_Trajactory_Clustering/R/Lineage_distribution_of_each_cluster.R')
View(lineage_df)
lineage_percentage = table(all_factors)/sum(table(all_factors))
lineage_percentage = table(lineages)/sum(table(lineages))
pie(lineage_percentage, lineages,  col = rainbow(length(x)))
pie(lineage_percentage, lineages,  col = rainbow(length(lineages)))
pie(lineage_percentage, lineage_percentage, legend("topright", lineages), col = rainbow(length(lineages)))
View(lineage_df)
table(lineages)
pie(lineage_percentage, lineage_percentage,  col = rainbow(length(lineages)))
pie(lineage_percentage, lineage_percentage, legend("topright", as.character(lineages)), col = rainbow(length(lineages)))
View(gene_pair_df)
source('~/PycharmProjects/Cell_Fate_Trajactory_Clustering/R/Top_gene_id_no_name.R')
source('~/PycharmProjects/Cell_Fate_Trajactory_Clustering/R/Top_gene_id_no_name.R')
source('~/PycharmProjects/Cell_Fate_Trajactory_Clustering/R/Top_gene_id_no_name.R')
source('~/PycharmProjects/Cell_Fate_Trajactory_Clustering/R/Top_gene_id_no_name.R')
source('~/PycharmProjects/Cell_Fate_Trajactory_Clustering/R/Top_gene_id_no_name.R')
install.packages("rjags", dependencies=TRUE)
install.packages("R2jags", dependencies=TRUE) install.packages("coda") install.packages(“MCMCpack”,”bayesplot”)
install.packages("rjags", dependencies=TRUE)
install.packages("R2jags", dependencies=TRUE)
install.packages("coda")
install.packages(“MCMCpack”,”bayesplot”)
install.packages("MCMCpack","bayesplot")
library(R2jags)
rm(list=ls())
library(methylKit)
?saveMethyDiff
??saveMethyDiff
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DMRCaller")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DMRcaller")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install()
require(matrixStats)
require(methylKit)
?tileMethylCounts
require(GenomicRanges)
require(methylKit)
require(stringr)
require(rtracklayer)
require(karyoploteR)
require(ggplot2)
require(matrixStats)
# load custom functions
source("readBismarkFiles.R")
source("filterPooledMethyData.R")
source("saveMethyDiff.R")
source("callDiffByDifference.R")
source("calcDMRbyDMRCaller.R")
mc.cores = 8
tile.sz = 1000
gender = "Female"
old_ids = sprintf("%s-P%02d", "L2", c(1:10))
young_ids = c(sprintf("%s-P%02d", "L2", c(11:14)), sprintf("%s-P%02d", "L3", c(11:16)))
sample_ids= c(old_ids, young_ids)
coverage_filepaths=Sys.glob(sprintf("../data/merged_dataset/methylation_coverage_mm10/%s.cov", sample_ids))
sample_labels=c("old female","young female")
assembly = "mm9"
context = "CpG"
treatment = c(rep(1, 10), rep(0, length(sample_ids) - 10))
# 1. read bismark coverage format files into MethylRawList
methylList = readBismarkCoverage(coverage_filepaths, sample.id = sample_ids, assembly = assembly, treatment=treatment, context=context, min.cov=1)
grid.arrange
library(motifStack)
library(ggplot2)
analysis_dir <- "../data/merged_dataset/methylation_coverage_mm10/revised_pipeline/DMC_common_cov_5x_min_sample_5"
HPs <- c("HYPER", "HYPO")
topn <- 8
nrow <- length(HPs)
?grid.arrange
library(grid)
?grid.arrange
?grid.arange
grid.arrange
library(grid)
grid.arrange
library(ggpubr)
ggarrange
?ggarrange
library(motifStack)
library(ggpubr)
library(ggplot2)
analysis_dir <- "../data/merged_dataset/methylation_coverage_mm10/revised_pipeline/DMC_common_cov_5x_min_sample_5"
HPs <- c("HYPER", "HYPO")
topn <- 8
nrow <- length(HPs)
plts <- list()
pid <- 1
for (jdx in seq(nrow)){
hyper <- HPs[jdx]
homer_dir <- sprintf("%s/HOMER_%s_DMR", analysis_dir, hyper);
motif_info_fp <-sprintf("%s/knownResults.txt", homer_dir);
motif_info <- read.csv(motif_info_fp, header = T, sep = "\t")
for (idx in seq(topn)){
matrix_fp <- sprintf("%s/knownResults/known%d.motif", homer_dir, idx)
pcm <- read.table(matrix_fp, skip = 1, sep = "\t")
pcm <- t(pcm)
rownames(pcm) <- c("A","C","G","T")
motif_name <- unlist(strsplit(as.character(motif_info$Motif.Name[idx]), "/"))[1]
qval <- motif_info$q.value..Benjamini.[idx]
title <- sprintf("%s %.0e", motif_name, qval);
plts[[pid]] <- plotMotifLogo(as.matrix(pcm), title, xaxis = F, xlab="", newpage = F)
pid <- pid + 1
}
}
ggarrange(plts, ncol = topn, nrow = nrow)
plts[[pid]] <- plotMotifLogo(as.matrix(pcm), title, xaxis = F, xlab="", newpage = F)
matrix_fp <- sprintf("%s/knownResults/known%d.motif", homer_dir, idx)
pcm <- read.table(matrix_fp, skip = 1, sep = "\t")
pcm <- t(pcm)
rownames(pcm) <- c("A","C","G","T")
motif_name <- unlist(strsplit(as.character(motif_info$Motif.Name[idx]), "/"))[1]
qval <- motif_info$q.value..Benjamini.[idx]
title <- sprintf("%s %.0e", motif_name, qval);
plts[[pid]] <- plotMotifLogo(as.matrix(pcm), title, xaxis = F, xlab="", newpage = F)
pid <- pid + 1
library(motifStack)
library(ggpubr)
library(ggplot2)
analysis_dir <- "../data/merged_dataset/methylation_coverage_mm10/revised_pipeline/DMC_common_cov_5x_min_sample_5"
HPs <- c("HYPER", "HYPO")
topn <- 8
nrow <- length(HPs)
plts <- list()
pid <- 1
for (jdx in seq(nrow)){
hyper <- HPs[jdx]
homer_dir <- sprintf("%s/HOMER_%s_DMR", analysis_dir, hyper);
motif_info_fp <-sprintf("%s/knownResults.txt", homer_dir);
motif_info <- read.csv(motif_info_fp, header = T, sep = "\t")
for (idx in seq(topn)){
matrix_fp <- sprintf("%s/knownResults/known%d.motif", homer_dir, idx)
pcm <- read.table(matrix_fp, skip = 1, sep = "\t")
pcm <- t(pcm)
rownames(pcm) <- c("A","C","G","T")
motif_name <- unlist(strsplit(as.character(motif_info$Motif.Name[idx]), "/"))[1]
qval <- motif_info$q.value..Benjamini.[idx]
title <- sprintf("%s %.0e", motif_name, qval);
plts[[pid]] <- plotMotifLogo(as.matrix(pcm), title, xaxis = F, xlab="", newpage = F)
pid <- pid + 1
}
}
ggarrange(plts, ncol = topn, nrow = nrow)
analysis_dir <- "../data/merged_dataset/methylation_coverage_mm10/revised_pipeline/DMC_common_cov_5x_min_sample_5"
HPs <- c("HYPER", "HYPO")
topn <- 8
nrow <- length(HPs)
plts <- list()
pid <- 1
hyper <- HPs[1]
homer_dir <- sprintf("%s/HOMER_%s_DMR", analysis_dir, hyper);
motif_info_fp <-sprintf("%s/knownResults.txt", homer_dir);
motif_info <- read.csv(motif_info_fp, header = T, sep = "\t")
setwd("/Users/emmanueldollinger/PycharmProjects/spatial-constrained-clustering-and-pseudotime/sedr_analysis")
seq(10)
n_clusters <- c(7, 7, 7, 7, 5, 5, 5, 7, 7, 7, 7, 5)
seq(length(n_clusters))
len(n_clusters)
length(n_clusters)
i=1
sample.name = sample.names[i]
n_clusters[i]
n_clusters[i+1]
n_clusters[i+6]
n_cluster
source("~/PycharmProjects/spatial-constrained-clustering-and-pseudotime/sedr_analysis/DLPFC_BayesSpace.R")
